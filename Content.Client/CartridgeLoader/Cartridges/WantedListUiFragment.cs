using Content.Shared.CriminalRecords.Systems;
using Content.Shared.Security;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class WantedListUiFragment : BoxContainer
{
    private string? _selectedTargetName;
    private List<WantedRecord> _wantedRecords = new();
    private GridContainer? _historyGridContainer;

    public WantedListUiFragment()
    {
        RobustXamlLoader.Load(this);

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        var found = !String.IsNullOrWhiteSpace(args.Text)
            ? _wantedRecords.FindAll(r =>
                r.TargetName.Contains(args.Text) ||
                r.Status.ToString().Contains(args.Text, StringComparison.OrdinalIgnoreCase))
            : _wantedRecords;

        UpdateState(found, false);
    }

    public void UpdateState(List<WantedRecord> records, bool refresh)
    {
        RecordsList.Clear();

        if (records.Count == 0)
        {
            NoRecords.Visible = true;
            RecordsListContainer.Visible = false;
            RecordUnselected.Visible = false;
            PersonContainer.Visible = false;

            _selectedTargetName = null;
            if (refresh)
                _wantedRecords.Clear();

            return;
        }

        NoRecords.Visible = false;
        RecordsListContainer.Visible = true;
        RecordUnselected.Visible = true;
        PersonContainer.Visible = false;

        foreach (var record in records)
        {
            var addedItem = RecordsList.AddItem(record.TargetName, metadata: record);
            addedItem.Selected = String.Equals(record.TargetName, _selectedTargetName);
        }

        RecordsList.OnItemSelected += OnItemSelected;

        if (refresh)
            _wantedRecords = records;
    }

    public void UpdateState(List<WantedRecord> records) => UpdateState(records, true);

    private void OnItemSelected(ItemList.ItemListSelectedEventArgs args)
    {
        // Destruct args
        var (index, list) = (args.ItemIndex, args.ItemList);
        // Get record from metadata
        if (!list.TryGetValue(index, out var item) || item.Metadata is not WantedRecord record)
            return;

        // Set person name
        PersonName.Text = record.TargetName;

        // Set reason
        var reason = Loc.GetString("wanted-list-reason-label", ("reason", record.Reason ?? String.Empty));
        var reasonMsg = new FormattedMessage();
        reasonMsg.AddMarkupPermissive(reason);
        WantedReason.SetMessage(reasonMsg);

        // Set status
        var statusText = Loc.GetString("wanted-list-status-" + record.Status switch
        {
            SecurityStatus.Wanted => "wanted",
            SecurityStatus.Suspected => "suspected",
            _ => string.Empty,
        });
        var statusLabel = Loc.GetString("criminal-records-console-status").ToLower();
        var stateMsg = new FormattedMessage();
        stateMsg.AddMarkupPermissive($"{statusLabel}: {statusText}");
        PersonState.SetMessage(stateMsg);

        // Set initiator
        const string initiatorLabelId = "wanted-list-initiator-label";
        var initiatorLabel = record.Initiator is null
            ? Loc.GetString(initiatorLabelId)
            : Loc.GetString(initiatorLabelId, ("initiator", record.Initiator));
        var initiatorMsg = new FormattedMessage();
        initiatorMsg.AddMarkupPermissive(initiatorLabel);
        InitiatorName.SetMessage(initiatorMsg);

        // History table

        // Clear table if it exists
        if (_historyGridContainer is not null && DataContainer.Children.Contains(_historyGridContainer))
        {
            _historyGridContainer.RemoveAllChildren();
        }
        else
        {
            _historyGridContainer = new GridContainer()
            {
                Name = "HistoryTable",
                Columns = 5,
                HorizontalExpand = true,
            };
        }

        void AddDivider()
        {
            var panel = new PanelContainer() { StyleClasses = { "LowDivider" }, };
            _historyGridContainer.AddChild(panel);
        }

        _historyGridContainer.AddChild(new Label()
        {
            Text = Loc.GetString("wanted-list-history-table-time-col"),
            StyleClasses = { "LabelSmall" },
            MaxWidth = 30,
            HorizontalAlignment = HAlignment.Center,
        });
        AddDivider();
        _historyGridContainer.AddChild(new Label()
        {
            Text = Loc.GetString("wanted-list-history-table-reason-col"),
            StyleClasses = { "LabelSmall" },
            HorizontalAlignment = HAlignment.Center,
        });
        AddDivider();
        _historyGridContainer.AddChild(new Label()
        {
            Text = Loc.GetString("wanted-list-history-table-initiator-col"),
            StyleClasses = { "LabelSmall" },
            HorizontalAlignment = HAlignment.Center,
        });

        if (record.History.Count > 0)
        {
            foreach (var history in record.History)
            {
                _historyGridContainer.AddChild(new Label()
                {
                    Text = $"{history.AddTime.Hours:00}:{history.AddTime.Minutes:00}:{history.AddTime.Seconds:00}",
                    StyleClasses = { "LabelSmall" },
                });
                AddDivider();
                _historyGridContainer.AddChild(new Label()
                {
                    Text = history.Crime,
                    StyleClasses = { "LabelSmall" },
                });
                AddDivider();
                _historyGridContainer.AddChild(new Label()
                {
                    Text = history.InitiatorName,
                    StyleClasses = { "LabelSmall" },
                });
            }
        }

        DataContainer.AddChild(_historyGridContainer);

        RecordUnselected.Visible = false;
        PersonContainer.Visible = true;

        // Save selected item
        _selectedTargetName = record.TargetName;
    }
}
