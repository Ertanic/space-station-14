using Content.Shared.CriminalRecords.Systems;
using Content.Shared.Security;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class WantedListUiFragment : BoxContainer
{
    private string? _selectedTargetName;
    private List<WantedRecord> _wantedRecords = new();

    public WantedListUiFragment()
    {
        RobustXamlLoader.Load(this);

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        var found = !String.IsNullOrWhiteSpace(args.Text)
            ? _wantedRecords.FindAll(r =>
                r.TargetName.Contains(args.Text) ||
                r.Status.ToString().Contains(args.Text, StringComparison.OrdinalIgnoreCase))
            : _wantedRecords;

        UpdateState(found, false);
    }

    public void UpdateState(List<WantedRecord> records, bool refresh)
    {
        RecordsList.Clear();

        if (records.Count == 0)
        {
            NoRecords.Visible = true;
            RecordsListContainer.Visible = false;
            RecordUnselected.Visible = false;
            PersonContainer.Visible = false;

            _selectedTargetName = null;
            if (refresh)
                _wantedRecords.Clear();

            return;
        }

        NoRecords.Visible = false;
        RecordsListContainer.Visible = true;
        RecordUnselected.Visible = true;
        PersonContainer.Visible = false;

        foreach (var record in records)
        {
            var addedItem = RecordsList.AddItem(record.TargetName, metadata: record);
            addedItem.Selected = String.Equals(record.TargetName, _selectedTargetName);
        }

        RecordsList.OnItemSelected += OnItemSelected;

        if (refresh)
            _wantedRecords = records;
    }

    public void UpdateState(List<WantedRecord> records) => UpdateState(records, true);

    private void OnItemSelected(ItemList.ItemListSelectedEventArgs args)
    {
        var (index, list) = (args.ItemIndex, args.ItemList);
        if (!list.TryGetValue(index, out var item) || item.Metadata is not WantedRecord record)
            return;

        PersonName.Text = record.TargetName;

        var reason = Loc.GetString("wanted-list-reason", ("reason", record.Reason ?? String.Empty));
        var reasonMsg = new FormattedMessage();
        reasonMsg.AddMarkupPermissive(reason);
        WantedReason.SetMessage(reasonMsg);

        var statusText = Loc.GetString("wanted-list-status-" + record.Status switch
        {
            SecurityStatus.Wanted => "wanted",
            SecurityStatus.Suspected => "suspected",
            _ => string.Empty,
        });
        var statusLabel = Loc.GetString("criminal-records-console-status").ToLower();
        var stateMsg = new FormattedMessage();
        stateMsg.AddMarkupPermissive($"{statusLabel}: {statusText}");
        PersonState.SetMessage(stateMsg);

        RecordUnselected.Visible = false;
        PersonContainer.Visible = true;

        _selectedTargetName = record.TargetName;
    }
}

